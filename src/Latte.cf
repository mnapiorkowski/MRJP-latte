-- programs ------------------------------------------------

entrypoints     Program ;
Progr.          Program ::= [TopDef] ;
FnDef.	        TopDef ::= TType Ident "(" [Arg] ")" Block ;
ClassDef.       TopDef ::= "class" Ident ClassBlock ;
SubclassDef.    TopDef ::= "class" Ident "extends" Ident ClassBlock ;
separator       nonempty TopDef "" ;

AArg.           Arg ::= TType Ident ;
separator       Arg "," ;

BBlock.         Block ::= "{" [Stmt] "}" ;
CBlock.         ClassBlock ::= "{" [CMember] "}" ;

separator       CMember "" ;
CMethod.        CMember ::= TType Ident "(" [Arg] ")" Block ; 
CAttr.          CMember ::= TType [AttrItem] ";" ;
AttrNoInit.     AttrItem ::= Ident ;
separator       nonempty AttrItem "," ;

-- statements ----------------------------------------------

separator       Stmt "" ;
SEmpty.         Stmt ::= ";" ;
SBlock.         Stmt ::= Block ;
SExp.           Stmt ::= Expr  ";" ;

SDecl.          Stmt ::= TType [Item] ";" ;
NoInit.         Item ::= Ident ;
Init.           Item ::= Ident "=" Expr ;
separator       nonempty Item "," ;

LVar.           LVal ::= Ident ;
LArr.           LVal ::= Expr7 "[" Expr "]" ;
LAttr.          LVal ::= Expr7 "." Ident ;

SAss.           Stmt ::= LVal "=" Expr  ";" ;
SIncr.          Stmt ::= LVal "++"  ";" ;
SDecr.          Stmt ::= LVal "--"  ";" ;

SRet.           Stmt ::= "return" Expr ";" ;
SVRet.          Stmt ::= "return" ";" ;

SIf.            Stmt ::= "if" "(" Expr ")" Stmt ;
SIfElse.        Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt ;

SWhile.         Stmt ::= "while" "(" Expr ")" Stmt ;
SFor.           Stmt ::= "for" "(" TType Ident ":" Expr ")" Stmt ;

-- Types ---------------------------------------------------

TInt.           TType1 ::= "int" ;
TBool.          TType1 ::= "boolean" ;
TString.        TType1 ::= "string" ;
TVoid.          TType1 ::= "void" ;
TArray.         TType1 ::= TType "[]" ;
_.              TType ::= TType1 ;
TClass.         TType ::= Ident ;

-- Expressions ---------------------------------------------

ELitInt.        Expr8 ::= Integer ;
ELitTrue.       Expr8 ::= "true" ;
ELitFalse.      Expr8 ::= "false" ;
EString.        Expr8 ::= String ;
ENull.          Expr8 ::= "null" ;

ELVal.          Expr7 ::= LVal ;
ESelf.          Expr7 ::= "self" ;
ECall.          Expr7 ::= Ident "(" [Expr] ")" ;
EMetCall.       Expr7 ::= Expr7 "." Ident "(" [Expr] ")" ;

ENewObj.        Expr6 ::= "new" TType ;
ENewArr.        Expr6 ::= "new" TType "[" Expr "]" ;

ECast.          Expr5 ::= "(" TType1 ")" Expr6 ;
ECastClass.     Expr5 ::= "(" Expr ")" Expr6 ; 
ENeg.           Expr5 ::= "-" Expr6 ;
ENot.           Expr5 ::= "!" Expr6 ;

EMul.           Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.           Expr3 ::= Expr3 AddOp Expr4 ;

ERel.           Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.           Expr1 ::= Expr2 "&&" Expr1 ;

EOr.            Expr ::= Expr1 "||" Expr ;

coercions       Expr 8 ;
separator       Expr "," ;

-- operators -----------------------------------------------

OPlus.          AddOp ::= "+" ;
OMinus.         AddOp ::= "-" ;

OTimes.         MulOp ::= "*" ;
ODiv.           MulOp ::= "/" ;
OMod.           MulOp ::= "%" ;

OLt.            RelOp ::= "<" ;
OLeq.           RelOp ::= "<=" ;
OGt.            RelOp ::= ">" ;
OGeq.           RelOp ::= ">=" ;
OEq.            RelOp ::= "==" ;
ONeq.           RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment         "#" ;
comment         "//" ;
comment         "/*" "*/" ;
